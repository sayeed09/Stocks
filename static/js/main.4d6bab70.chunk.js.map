{"version":3,"sources":["components/FetchStocks.js","components/DisplayStocks.js","configs/Graph.js","components/DisplayGraph.js","components/LoadingView.js","components/DisplayError.js","components/App.js","index.js"],"names":["FetchStocks","props","window","location","protocol","url","onMessage","e","handleData","onClose","closeConnection","stocks","DisplayStock","newStock","this","stockResults","map","item","da","textClass","value","previousData","push","time","Date","now","name","tableData","Object","keys","data","selectedClassName","selectedItem","onClick","onStockItemSelect","className","Number","toFixed","date","slice","color","updateStockDetail","length","stocktableDetails","renderRows","scope","React","Component","labels","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","chartJsConfig","responsive","scales","xAxes","type","distribution","ticks","source","displayFormats","second","unit","scaleLabel","display","labelString","yAxes","beginAtZero","stepValue","steps","DisplayGraph","stockData","stockDetails","getData","t","y","ref","options","LoadingView","height","width","DisplayError","reload","open","onCloseModal","center","App","state","isLoading","hasError","result","JSON","parse","setState","err","Fragment","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4d6bab70.chunk.js","sourcesContent":["import React from 'react';\r\nimport Websocket from 'react-websocket';\r\n\r\nconst url = \"ws://stocks.mnet.website/\";\r\n\r\nconst FetchStocks = (props) => {\r\n    return window.location.protocol !== \"http\" ? <Websocket url={url}\r\n        onMessage={(e) => props.handleData(e)}\r\n        onClose={(e) => props.closeConnection(e)} /> : (e) => props.closeConnection(e);\r\n}\r\nexport default FetchStocks;\r\n\r\n\r\n//Importing this components will get the live stock data","import React from 'react';\r\nimport { Sparklines, SparklinesLine } from 'react-sparklines';\r\nimport TimeAgo from 'react-timeago';\r\n\r\nlet stocks = {};\r\nclass DisplayStock extends React.Component {\r\n\r\n    renderRows() {\r\n        let newStock = stocks;\r\n        this.props.stockResults.map((item) => {\r\n            let da = stocks[item[0]];\r\n            if (newStock && newStock[item[0]]) {            // already stock present else add\r\n                newStock[item[0]].textClass = da.value < item[1] ? \"text-success\" : \"text-danger\";     // this condition takes care of comparison betn previous & current\r\n                newStock[item[0]].previousData.push({ time: Date.now(), value: item[1] })\r\n                newStock[item[0]].value = item[1];\r\n            }\r\n            else {\r\n                newStock[item[0]] = { name: item[0], previousData: [{ time: Date.now(), value: item[1] }], value: item[1], textClass: '' };\r\n            }\r\n\r\n        })\r\n        stocks = newStock;\r\n        if (stocks != null) {\r\n            var tableData = Object.keys(stocks).map((item) => {\r\n                let data = stocks[item];\r\n                let selectedClassName = item === this.props.selectedItem ? \"selected-row\" : '';\r\n                return <tr onClick={() => this.props.onStockItemSelect(item)} className={selectedClassName}>\r\n                    <td>{item}</td>\r\n                    <td className={data.textClass}>{Number(data.value).toFixed(2)}</td>\r\n                    <td><TimeAgo date={data.previousData.slice(-1)[0].time} /></td>\r\n                    <td><Sparklines data={data.previousData.map((previousData) => { return previousData.value })}>\r\n                        <SparklinesLine color=\"blue\" />\r\n                    </Sparklines></td>\r\n                </tr>\r\n            });\r\n        }\r\n        this.props.updateStockDetail(stocks);\r\n\r\n        return tableData;\r\n    }\r\n\r\n    render() {\r\n        if (this.props.stockResults != null && this.props.stockResults.length > 0) {\r\n            var stocktableDetails = this.renderRows();\r\n        }\r\n        return (\r\n            <div className=\"col-sm-4 bg-light\">\r\n\r\n                <h4 className=\"bg-dark px-2 text-white pb-2 mt-2\">Live Stock App</h4>\r\n                <table className=\"table table-hover bg-white\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th scope=\"col\">Name</th>\r\n                            <th scope=\"col\">Price</th>\r\n                            <th scope=\"col\">Updated At</th>\r\n                            <th scope=\"col\">History</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody className=\"tablebody-pointer\">\r\n                        {stocktableDetails}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default DisplayStock;","\r\nexport const data = {\r\n    labels: [],\r\n    datasets: [\r\n        {\r\n            label: '',\r\n            fill: false,\r\n            lineTension: 0.1,\r\n            backgroundColor: 'white',\r\n            borderColor: 'white',\r\n            borderCapStyle: 'butt',\r\n            borderDash: [],\r\n            borderDashOffset: 0.0,\r\n            borderJoinStyle: 'miter',\r\n            pointBorderColor: 'rgba(75,192,192,1)',\r\n            pointBackgroundColor: '#fff',\r\n            pointBorderWidth: 1,\r\n            pointHoverRadius: 5,\r\n            pointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n            pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n            pointHoverBorderWidth: 2,\r\n            pointRadius: 1,\r\n            pointHitRadius: 10,\r\n            data: []\r\n        }\r\n    ]\r\n};\r\n// configurations required for ChartJs\r\n\r\nexport const chartJsConfig = {\r\n    responsive: true,\r\n    scales: {\r\n        xAxes: [{\r\n          type: 'time',\r\n          distribution: 'linear',\r\n          ticks: {\r\n            source: 'auto'\r\n          },\r\n          time: {\r\n            displayFormats: {second: 'h:mm:ss a'},\r\n            unit: 'second'\r\n          },\r\n          scaleLabel: {\r\n            display: true,\r\n            labelString: 'Time'\r\n          }\r\n        }],\r\n        yAxes: [{\r\n          ticks: {\r\n            beginAtZero: true,\r\n            stepValue: 10,\r\n            steps: 10\r\n          },\r\n          scaleLabel: {\r\n            display: true,\r\n            labelString: 'Price ($)'\r\n          }\r\n        }]\r\n      }\r\n};\r\n","import React, { Component } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { chartJsConfig, data } from '../configs/Graph';\r\n\r\nclass DisplayGraph extends Component {\r\n    render() {\r\n        if (this.props.selectedItem != null) {\r\n            let stockData = this.props.stockDetails[this.props.selectedItem];\r\n            data.datasets[0].label = stockData.name;\r\n            data.datasets[0].backgroundColor = \"rgb(255,165,0)\";\r\n            data.datasets[0].borderColor = \"rgb(255,165,0)\";\r\n\r\n            let getData = stockData.previousData.map((item) => {\r\n                return { t: new Date(item.time), y: item.value };\r\n                ;\r\n            })\r\n            data.datasets[0].data = getData;\r\n        }\r\n        return (\r\n            <div className=\"col-sm-7\" >\r\n                <h2 className=\"px-2 mt-2 pb-2 bg-light\">Graph</h2>\r\n                <p className=\"text-info\">Click on any of the stock to see the graph</p>\r\n                <Line ref=\"chart\" data={data} options={chartJsConfig} />\r\n            </div>\r\n        );\r\n\r\n    }\r\n}\r\n\r\nexport default DisplayGraph;","import React from 'react'\r\nimport Loader from 'react-loader-spinner'\r\n\r\nconst LoadingView = () => {\r\n    return (\r\n        <div className=\"loading\">\r\n            <Loader\r\n                type=\"Oval\"\r\n                color=\"black\"\r\n                height={50}\r\n                width={45}\r\n            />\r\n            <p>Loading...</p></div>\r\n    );\r\n};\r\n\r\nexport default LoadingView;","import React from 'react'\r\nimport Modal from 'react-responsive-modal';\r\n\r\nclass DisplayError extends React.Component {\r\n\r\n    onCloseModal() {\r\n        window.location.reload();\r\n    }\r\n    render() {\r\n        return <Modal open={true} onClose={this.onCloseModal} center>\r\n            <p className=\"mt-3 px-3 py-3\">You need to allow load unsafe scripts to run this application,\r\n            <br /> you see shield icon in address bar</p>\r\n        </Modal>\r\n    }\r\n}\r\nexport default DisplayError;","import React from 'react';\r\nimport FetchStocks from './FetchStocks';\r\nimport DisplayStock from './DisplayStocks';\r\nimport DisplayGraph from './DisplayGraph';\r\nimport LoadingView from './LoadingView';\r\nimport DisplayError from './DisplayError';\r\n\r\n\r\nlet stockDetails = {};\r\nclass App extends React.Component {\r\n    state = {\r\n        isLoading: true,\r\n        stockResults: null,\r\n        selectedItem: null,\r\n        hasError: false\r\n    }\r\n    handleData = (data) => {\r\n        let result = JSON.parse(data);\r\n        if (result && result.length > 0) {\r\n            this.setState({ isLoading: false, stockResults: result })\r\n        }\r\n    }\r\n    onStockItemSelect = (item) => {\r\n        this.setState({ selectedItem: item });\r\n    }\r\n    updateStockDetail = (data) => {\r\n        stockDetails = data\r\n    }\r\n    closeConnection = (err) => {\r\n        this.setState({ hasError: true })\r\n    }\r\n    render() {\r\n        return <React.Fragment>\r\n            <FetchStocks handleData={this.handleData}                       //fetching real time stocks\r\n                closeConnection={this.closeConnection} />\r\n\r\n            {!this.state.isLoading && !this.state.hasError &&\r\n                <div className=\"container-fluid\">\r\n                    <div className=\"row\">\r\n                        <DisplayStock stockResults={this.state.stockResults} onStockItemSelect={this.onStockItemSelect}\r\n                            selectedItem={this.state.selectedItem} updateStockDetail={this.updateStockDetail} />\r\n                        <DisplayGraph selectedItem={this.state.selectedItem} stockDetails={stockDetails} />\r\n                    </div>\r\n                </div>}\r\n            {this.state.isLoading && !this.state.hasError && <LoadingView />}\r\n\r\n            {this.state.hasError && <DisplayError />}\r\n        </React.Fragment>\r\n    }\r\n}\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}