{"version":3,"sources":["components/DisplayStocks.js","configs/Graph.js","components/DisplayGraph.js","components/DisplayError.js","components/App.js","index.js"],"names":["stocks","React","Component","data","labels","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","chartJsConfig","responsive","scales","xAxes","type","distribution","ticks","source","time","displayFormats","second","unit","scaleLabel","display","labelString","yAxes","beginAtZero","stepValue","steps","DisplayError","open","onClose","this","onCloseModal","center","App","state","isLoading","stockResults","selectedItem","hasError","handleData","result","JSON","parse","length","setState","onStockItemSelect","item","updateStockDetail","closeConnection","err","console","log","ReactDOM","render","document","getElementById"],"mappings":"4OAIIA,EAAS,G,GACcC,IAAMC,U,OCJpBC,EAAO,CAChBC,OAAQ,GACRC,SAAU,CACN,CACIC,MAAO,GACPC,MAAM,EACNC,YAAa,GACbC,gBAAiB,QACjBC,YAAa,QACbC,eAAgB,OAChBC,WAAY,GACZC,iBAAkB,EAClBC,gBAAiB,QACjBC,iBAAkB,qBAClBC,qBAAsB,OACtBC,iBAAkB,EAClBC,iBAAkB,EAClBC,0BAA2B,qBAC3BC,sBAAuB,sBACvBC,sBAAuB,EACvBC,YAAa,EACbC,eAAgB,GAChBpB,KAAM,MAMLqB,EAAgB,CACzBC,YAAY,EACZC,OAAQ,CACJC,MAAO,CAAC,CACNC,KAAM,OACNC,aAAc,SACdC,MAAO,CACLC,OAAQ,QAEVC,KAAM,CACJC,eAAgB,CAACC,OAAQ,aACzBC,KAAM,UAERC,WAAY,CACVC,SAAS,EACTC,YAAa,UAGjBC,MAAO,CAAC,CACNT,MAAO,CACLU,aAAa,EACbC,UAAW,GACXC,MAAO,IAETN,WAAY,CACVC,SAAS,EACTC,YAAa,iB,GCnDEpC,Y,aCYZyC,E,yNANP,OAAO,kBAAC,IAAD,CAAOC,MAAM,EAAMC,QAASC,KAAKC,aAAcC,QAAM,GACxD,mE,GARe/C,IAAMC,WC8ClB+C,E,2MAvCXC,MAAQ,CACJC,WAAW,EACXC,aAAc,KACdC,aAAc,KACdC,UAAU,G,EAEdC,WAAa,SAACpD,GACV,IAAIqD,EAASC,KAAKC,MAAMvD,GACpBqD,GAAUA,EAAOG,OAAS,GAC1B,EAAKC,SAAS,CAAET,WAAW,EAAOC,aAAcI,K,EAGxDK,kBAAoB,SAACC,GACjB,EAAKF,SAAS,CAAEP,aAAcS,K,EAElCC,kBAAoB,SAAC5D,GACFA,G,EAEnB6D,gBAAkB,SAACC,GACf,EAAKL,SAAS,CAAEN,UAAU,IAC1BY,QAAQC,IAAIF,I,wEAgBZ,OAAO,kBAAC,EAAD,U,GArCGhE,IAAMC,W,OCJxBkE,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.c68e4bc2.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Sparklines, SparklinesLine } from 'react-sparklines';\r\nimport TimeAgo from 'react-timeago';\r\n\r\nlet stocks = {};\r\nclass DisplayStock extends React.Component {\r\n\r\n    renderRows() {\r\n        let newStock = stocks;\r\n        this.props.stockResults.map((item) => {\r\n            let da = stocks[item[0]];\r\n            if (newStock && newStock[item[0]]) {            // already stock present else add\r\n                newStock[item[0]].textClass = da.value < item[1] ? \"text-success\" : \"text-danger\";     // this condition takes care of comparison betn previous & current\r\n                newStock[item[0]].previousData.push({ time: Date.now(), value: item[1] })\r\n                newStock[item[0]].value = item[1];\r\n            }\r\n            else {\r\n                newStock[item[0]] = { name: item[0], previousData: [{ time: Date.now(), value: item[1] }], value: item[1], textClass: '' };\r\n            }\r\n\r\n        })\r\n        stocks = newStock;\r\n        if (stocks != null) {\r\n            var tableData = Object.keys(stocks).map((item) => {\r\n                let data = stocks[item];\r\n                let selectedClassName = item === this.props.selectedItem ? \"selected-row\" : '';\r\n                return <tr onClick={() => this.props.onStockItemSelect(item)} className={selectedClassName}>\r\n                    <td>{item}</td>\r\n                    <td className={data.textClass}>{Number(data.value).toFixed(2)}</td>\r\n                    <td><TimeAgo date={data.previousData.slice(-1)[0].time} /></td>\r\n                    <td><Sparklines data={data.previousData.map((previousData) => { return previousData.value })}>\r\n                        <SparklinesLine color=\"blue\" />\r\n                    </Sparklines></td>\r\n                </tr>\r\n            });\r\n        }\r\n        this.props.updateStockDetail(stocks);\r\n\r\n        return tableData;\r\n    }\r\n\r\n    render() {\r\n        if (this.props.stockResults != null && this.props.stockResults.length > 0) {\r\n            var stocktableDetails = this.renderRows();\r\n        }\r\n        return (\r\n            <div className=\"col-sm-4 bg-light\">\r\n\r\n                <h4 className=\"bg-dark px-2 text-white pb-2 mt-2\">Live Stock App</h4>\r\n                <table className=\"table table-hover bg-white\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th scope=\"col\">Name</th>\r\n                            <th scope=\"col\">Price</th>\r\n                            <th scope=\"col\">Updated At</th>\r\n                            <th scope=\"col\">History</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody className=\"tablebody-pointer\">\r\n                        {stocktableDetails}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default DisplayStock;","\r\nexport const data = {\r\n    labels: [],\r\n    datasets: [\r\n        {\r\n            label: '',\r\n            fill: false,\r\n            lineTension: 0.1,\r\n            backgroundColor: 'white',\r\n            borderColor: 'white',\r\n            borderCapStyle: 'butt',\r\n            borderDash: [],\r\n            borderDashOffset: 0.0,\r\n            borderJoinStyle: 'miter',\r\n            pointBorderColor: 'rgba(75,192,192,1)',\r\n            pointBackgroundColor: '#fff',\r\n            pointBorderWidth: 1,\r\n            pointHoverRadius: 5,\r\n            pointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n            pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n            pointHoverBorderWidth: 2,\r\n            pointRadius: 1,\r\n            pointHitRadius: 10,\r\n            data: []\r\n        }\r\n    ]\r\n};\r\n// configurations required for ChartJs\r\n\r\nexport const chartJsConfig = {\r\n    responsive: true,\r\n    scales: {\r\n        xAxes: [{\r\n          type: 'time',\r\n          distribution: 'linear',\r\n          ticks: {\r\n            source: 'auto'\r\n          },\r\n          time: {\r\n            displayFormats: {second: 'h:mm:ss a'},\r\n            unit: 'second'\r\n          },\r\n          scaleLabel: {\r\n            display: true,\r\n            labelString: 'Time'\r\n          }\r\n        }],\r\n        yAxes: [{\r\n          ticks: {\r\n            beginAtZero: true,\r\n            stepValue: 10,\r\n            steps: 10\r\n          },\r\n          scaleLabel: {\r\n            display: true,\r\n            labelString: 'Price ($)'\r\n          }\r\n        }]\r\n      }\r\n};\r\n","import React, { Component } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { chartJsConfig, data } from '../configs/Graph';\r\n\r\nclass DisplayGraph extends Component {\r\n    render() {\r\n        if (this.props.selectedItem != null) {\r\n            let stockData = this.props.stockDetails[this.props.selectedItem];\r\n            data.datasets[0].label = stockData.name;\r\n            data.datasets[0].backgroundColor = \"rgb(255,165,0)\";\r\n            data.datasets[0].borderColor = \"rgb(255,165,0)\";\r\n\r\n            let getData = stockData.previousData.map((item) => {\r\n                return { t: new Date(item.time), y: item.value };\r\n                ;\r\n            })\r\n            data.datasets[0].data = getData;\r\n        }\r\n        return (\r\n            <div className=\"col-sm-7\" >\r\n                <h2 className=\"px-2 mt-2 pb-2 bg-light\">Graph</h2>\r\n                <p className=\"text-info\">Click on any of the stock to see the graph</p>\r\n                <Line ref=\"chart\" data={data} options={chartJsConfig} />\r\n            </div>\r\n        );\r\n\r\n    }\r\n}\r\n\r\nexport default DisplayGraph;","import React from 'react'\r\nimport Modal from 'react-responsive-modal';\r\n\r\nclass DisplayError extends React.Component {\r\n\r\n\r\n    onCloseModal() {\r\n\r\n    }\r\n    render() {\r\n        return <Modal open={true} onClose={this.onCloseModal} center>\r\n            <p>Getting error please try again </p>\r\n        </Modal>\r\n    }\r\n}\r\n\r\nexport default DisplayError;","import React from 'react';\r\nimport FetchStocks from './FetchStocks';\r\nimport DisplayStock from './DisplayStocks';\r\nimport DisplayGraph from './DisplayGraph';\r\nimport LoadingView from './LoadingView';\r\nimport DisplayError from './DisplayError';\r\n\r\n\r\nlet stockDetails = {};\r\nclass App extends React.Component {\r\n    state = {\r\n        isLoading: true,\r\n        stockResults: null,\r\n        selectedItem: null,\r\n        hasError: false\r\n    }\r\n    handleData = (data) => {\r\n        let result = JSON.parse(data);\r\n        if (result && result.length > 0) {\r\n            this.setState({ isLoading: false, stockResults: result })\r\n        }\r\n    }\r\n    onStockItemSelect = (item) => {\r\n        this.setState({ selectedItem: item });\r\n    }\r\n    updateStockDetail = (data) => {\r\n        stockDetails = data\r\n    }\r\n    closeConnection = (err) => {\r\n        this.setState({ hasError: true })\r\n        console.log(err);\r\n    }\r\n    render() {\r\n        // return <React.Fragment>\r\n        //     <FetchStocks handleData={this.handleData}                       //fetching real time stocks\r\n        //         closeConnection={this.closeConnection} />\r\n        //     {!this.state.isLoading &&\r\n        //         <div className=\"container-fluid\">\r\n        //             <div className=\"row\">\r\n        //                 <DisplayStock stockResults={this.state.stockResults} onStockItemSelect={this.onStockItemSelect}\r\n        //                     selectedItem={this.state.selectedItem} updateStockDetail={this.updateStockDetail} />\r\n        //                 <DisplayGraph selectedItem={this.state.selectedItem} stockDetails={stockDetails} />\r\n        //             </div>\r\n        //         </div>}\r\n        //     {this.state.isLoading && <LoadingView />}\r\n        // </React.Fragment>\r\n        return <DisplayError />\r\n    }\r\n}\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}